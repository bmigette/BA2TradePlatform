"""rename datetime_created to created_at in AnalysisOutput

Revision ID: 90c713a1c75b
Revises: 2b4cf753ba81
Create Date: 2025-09-24 15:11:16.202741

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '90c713a1c75b'
down_revision: Union[str, Sequence[str], None] = '2b4cf753ba81'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # For SQLite, we need to recreate the table to rename columns properly
    with op.batch_alter_table('analysisoutput', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=False))
        # Copy data using a raw SQL update - this will be handled by the batch operation
        
    # Copy data from old column to new column (outside batch operation)
    op.execute('UPDATE analysisoutput SET created_at = datetime_created')
    
    # Drop the old column in another batch operation
    with op.batch_alter_table('analysisoutput', schema=None) as batch_op:
        batch_op.drop_column('datetime_created')
    op.alter_column('expertrecommendation', 'recommended_action',
               existing_type=sa.VARCHAR(length=4),
               type_=sa.Enum('SELL', 'BUY', 'HOLD', 'ERROR', name='orderrecommendation'),
               existing_nullable=False)
    op.create_foreign_key(None, 'expertrecommendation', 'marketanalysis', ['market_analysis_id'], ['id'], ondelete='CASCADE')
    op.alter_column('instrument', 'company_name',
               existing_type=sa.VARCHAR(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('instrument', 'company_name',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.drop_constraint(None, 'expertrecommendation', type_='foreignkey')
    op.alter_column('expertrecommendation', 'recommended_action',
               existing_type=sa.Enum('SELL', 'BUY', 'HOLD', 'ERROR', name='orderrecommendation'),
               type_=sa.VARCHAR(length=4),
               existing_nullable=False)
    
    # For SQLite, recreate table for downgrade
    with op.batch_alter_table('analysisoutput', schema=None) as batch_op:
        batch_op.add_column(sa.Column('datetime_created', sa.DATETIME(), nullable=False))
    
    # Copy data from new column to old column
    op.execute('UPDATE analysisoutput SET datetime_created = created_at')
    
    # Drop the new column
    with op.batch_alter_table('analysisoutput', schema=None) as batch_op:
        batch_op.drop_column('created_at')
    # ### end Alembic commands ###
